Certainly! I'll provide a brief example for using WebSocket with different technologiesâ€”Node.js for the backend and React for the frontend. In this example, I'll use the `socket.io` library for WebSocket communication.

### Backend (Node.js with socket.io):

1. **Install necessary packages:**
   ```bash
   npm init -y
   npm install express socket.io
   ```

2. **Create a simple server (`server.js`):**
   ```javascript
   const express = require('express');
   const http = require('http');
   const socketIo = require('socket.io');

   const app = express();
   const server = http.createServer(app);
   const io = socketIo(server);

   io.on('connection', (socket) => {
       console.log('A user connected');
       socket.on('message', (data) => {
           console.log('Message from client:', data);
           io.emit('message', data); // Broadcast the message to all connected clients
       });
       socket.on('disconnect', () => {
           console.log('User disconnected');
       });
   });

   const PORT = process.env.PORT || 5000;
   server.listen(PORT, () => {
       console.log(`Server running on http://localhost:${PORT}`);
   });
   ```

3. **Deploy the backend:**
   - Assuming you have a server where you can deploy your Node.js application, you would typically use a process manager like `pm2` or deploy it on a platform like Heroku. The deployment steps may vary based on your hosting provider.

### Frontend (React):

1. **Create a new React app:**
   ```bash
   npx create-react-app react-socket-app
   cd react-socket-app
   ```

2. **Install necessary packages:**
   ```bash
   npm install socket.io-client
   ```

3. **Modify the `src/App.js` file:**
   ```javascript
   import React, { useState, useEffect } from 'react';
   import io from 'socket.io-client';

   const socket = io('http://localhost:5000'); // Adjust the URL based on your backend deployment

   function App() {
       const [message, setMessage] = useState('');
       const [receivedMessage, setReceivedMessage] = useState('');

       useEffect(() => {
           socket.on('message', (data) => {
               setReceivedMessage(data);
           });

           return () => {
               socket.disconnect();
           };
       }, []);

       const sendMessage = () => {
           socket.emit('message', message);
           setMessage('');
       };

       return (
           <div>
               <h1>WebSocket Example</h1>
               <input
                   type="text"
                   placeholder="Type a message"
                   value={message}
                   onChange={(e) => setMessage(e.target.value)}
               />
               <button onClick={sendMessage}>Send</button>
               <p>Received Message: {receivedMessage}</p>
           </div>
       );
   }

   export default App;
   ```

4. **Deploy the frontend:**
   - Once your React app is ready, you can deploy it using various hosting platforms like Vercel, Netlify, or GitHub Pages. Follow the deployment instructions provided by your chosen hosting service.

This is a basic example, and in a production environment, you would need to consider security aspects, error handling, and possibly implement authentication depending on your application requirements. Additionally, adjust URLs and ports based on your deployment environment.